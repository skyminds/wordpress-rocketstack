# Deny all attempts to access hidden files (.htaccess, .htpasswd, .DS_Store)
# Keep logging the requests to parse later (or to pass to fail2ban)
location ~ (\.DS_Store|\.htpasswd|\.htaccess)$ {
	deny all;
}

# Deny access to any files with a .php extension in the uploads directory
# Works in sub-directory installs and also in multisite network
# Keep logging the requests to parse later (or to pass to fail2ban)
location ~* /(?:uploads|files)/.*\.php$ {
	deny all;
}

# Matt : basic security
# https://www.keycdn.com/blog/wordpress-security
location ~* wp-admin/includes { deny all; }
location ~* wp-includes/theme-compat/ { deny all; }
location ~* wp-includes/js/tinymce/langs/.*.php { deny all; }
location /wp-includes/ { internal; }

# no CGI scripts
location ~* .(pl|cgi|py|sh|lua)$ {
        return 444;
}

# restrict WordPress pain points
location ~ /(readme.html|license.txt)$ {
    deny all;
}

# Block access to all hidden files and directories with the exception of
# the visible content from within the `/.well-known/` hidden directory.
#
# These types of files usually contain user preferences or the preserved
# state of an utility, and can include rather private places like, for
# example, the `.git` or `.svn` directories.
#
# The `/.well-known/` directory represents the standard (RFC 5785) path
# prefix for "well-known locations" (e.g.: `/.well-known/manifest.json`,
# `/.well-known/keybase.txt`), and therefore, access to its visible
# content should not be blocked.
#
# https://www.mnot.net/blog/2010/04/07/well-known
# https://tools.ietf.org/html/rfc5785

location ~* /\.(?!well-known\/) {
  deny all;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Block access to files that can expose sensitive information.
#
# By default, block access to backup and source files that may be
# left by some text editors and can pose a security risk when anyone
# has access to them.
#
# https://feross.org/cmsploit/
#
# (!) Update the `location` regular expression from below to
# include any files that might end up on your production server and
# can expose sensitive information about your website. These files may
# include: configuration files, files that contain metadata about the
# project (e.g.: project dependencies), build scripts, etc..

location ~* (?:#.*#|\.(?:bak|conf|dist|fla|in[ci]|log|orig|psd|sh|sql|sw[op])|~)$ {
  deny all;
}
 
# https://www.bonusbits.com/wiki/Reference:Secure_Wordpress_Nginx_Configuration
# Prevent access to any files starting with a dot, like .htaccess
# or text editor temp files
# location ~ /\. { access_log off; log_not_found off; deny all; }

# Do not log access to the favicon, to keep the logs cleaner
location = /favicon.ico { 
    access_log off; 
    log_not_found off;
}

# Keep images and CSS around in browser cache for as long as possible,
# to cut down on server load
location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
    try_files $uri /index.php;
    expires max;
    log_not_found off;
}

# Rewrite index.php to /
if ($request_uri ~* "^(.*/)index\.php(?:.*)$") { return 301 $1$is_args$args; }